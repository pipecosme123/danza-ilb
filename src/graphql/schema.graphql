input CreateUsersDataInput {
  id: ID
  tipoId: String!
  numId: Int!
  nombres: String!
  apellidos: String!
  fechaNacimiento: String!
  genero: String!
  direccion: String!
  telefono: String!
}

input DeleteUsersDataInput {
  id: ID!
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelUsersDataConditionInput {
  tipoId: ModelStringInput
  numId: ModelIntInput
  nombres: ModelStringInput
  apellidos: ModelStringInput
  fechaNacimiento: ModelStringInput
  genero: ModelStringInput
  direccion: ModelStringInput
  telefono: ModelStringInput
  and: [ModelUsersDataConditionInput]
  or: [ModelUsersDataConditionInput]
  not: ModelUsersDataConditionInput
}

type ModelUsersDataConnection @aws_api_key @aws_iam {
  items: [UsersData]!
  nextToken: String
}

input ModelUsersDataFilterInput {
  id: ModelIDInput
  tipoId: ModelStringInput
  numId: ModelIntInput
  nombres: ModelStringInput
  apellidos: ModelStringInput
  fechaNacimiento: ModelStringInput
  genero: ModelStringInput
  direccion: ModelStringInput
  telefono: ModelStringInput
  and: [ModelUsersDataFilterInput]
  or: [ModelUsersDataFilterInput]
  not: ModelUsersDataFilterInput
}

input UpdateUsersDataInput {
  id: ID!
  tipoId: String
  numId: Int
  nombres: String
  apellidos: String
  fechaNacimiento: String
  genero: String
  direccion: String
  telefono: String
}

type UsersData @aws_iam @aws_api_key {
  id: ID!
  tipoId: String!
  numId: Int!
  nombres: String!
  apellidos: String!
  fechaNacimiento: String!
  genero: String!
  direccion: String!
  telefono: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Mutation {
  createUsersData(
    input: CreateUsersDataInput!
    condition: ModelUsersDataConditionInput
  ): UsersData @aws_api_key @aws_iam
  updateUsersData(
    input: UpdateUsersDataInput!
    condition: ModelUsersDataConditionInput
  ): UsersData @aws_api_key @aws_iam
  deleteUsersData(
    input: DeleteUsersDataInput!
    condition: ModelUsersDataConditionInput
  ): UsersData @aws_api_key @aws_iam
}

type Query {
  getUsersData(id: ID!): UsersData @aws_api_key @aws_iam
  listUsersDatas(
    filter: ModelUsersDataFilterInput
    limit: Int
    nextToken: String
  ): ModelUsersDataConnection @aws_api_key @aws_iam
  userNumId(
    numId: Int
    sortDirection: ModelSortDirection
    filter: ModelUsersDataFilterInput
    limit: Int
    nextToken: String
  ): ModelUsersDataConnection @aws_api_key @aws_iam
}

type Subscription {
  onCreateUsersData: UsersData
    @aws_subscribe(mutations: ["createUsersData"])
    @aws_api_key
    @aws_iam
  onUpdateUsersData: UsersData
    @aws_subscribe(mutations: ["updateUsersData"])
    @aws_api_key
    @aws_iam
  onDeleteUsersData: UsersData
    @aws_subscribe(mutations: ["deleteUsersData"])
    @aws_api_key
    @aws_iam
}
